ggr greg rise subject authentication one-time-pads wa advance one time pad article olson bryan olson cmsc g write one-time-pad yeilds ideal security ha well-known flaw authentication suppose use random bite stream pad exclusive-or encryption operation adversary know plaintext message change message work alice send bob plaintext p key stream alice compute ciphertext c xor p send bob eve know plainext p want message appear p eve intercept c compute c c xor p xor p xor p eve send c bob bob decrypt c compute p thus receive false message wa substitute eve firstly aside agree weakness exist lot trouble believe represent difficulty real life give purpose one-time pad give unbreakable security expense key distribution etc imply client really want level security people want keep p secret find hard believe eve might happen copy p lie around aware argument apply eve know even small part message eve must know exactly byte c know susequence start result garble find least surprise back question resource use one-time-pad transmission would also append message authentication code message use next bite one-time-pad key perhaps original question basically ask whether wa way authenticate message degree security pad provide know answer however would propose follow discussion alice bob arbitrary number secret random bite share eve doe know find effectively know p correspond c fact correspond cause problem message authentication code wa create use one-time-pad operation eve could know part mac affect part input would unable forge mac correspond require non-linear combiner part message non-linear simply xoring subtract whatever doe exactly effect end encrypt message c alice append n-bit mac compute follow mean next full chunk one time pad compute p xor pad n-bit boundary break n-bit chunk set mac initialisation vector chunk sequentially set mac mac nlop end process mac message authentication code bob verify mac obvious manner recover plaintext p us pad reproduce mac manner nlop non-linear operator rub simplest non-linear operator think s-box fix even publish permutation n-bit integer indexable table call sbox use x nlop x xor sbox practically speak think solve problem eve never see intermediate output hence ca deduce perform valid substitution also practically speak want mac fairly large say bite might want gigabyte say s-box might work byte-sized s-boxes think irrelevant detail discussion hand first point error give pointer literature greg rise australian compute communication institute ggr use standard phrase hijack may inadvisable caa 