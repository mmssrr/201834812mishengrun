ad axel dunkel subject summary sensible de towards bit-errors hi like thank fast response special thank go reply lexical order marcus j ranum mjr paul crowley pdc pausch paul schlyter tarnold todd w arnold wcs bill stewart question wa sensible de encrypt data towards bite error much data per bite lose average assume still correct key much des-encrypted data affect depend use encryption mode accord marcus j ranum mjr cfb cipher feedback mode ecb electronic code book mode cbc cipher block chain mode ofb output feedback mode mode doe stuff better others ofb cfb design communication stream file unfortunally people strongly disagree mode lead destruction follow data sure seem mode resync quite fast others never others even effect block summarize people say concern matter cbc mode current block affect tarnold todd w arnold use cbc cihper block chain remainder data destroy well pausch paul schlyter cfb mode de synchronize quite fast probably within block accord maracus j ranum mjr maybe someone definitely know happen mode nevertheless thank much axel dunkel include response get tarnold todd w arnold cat axel dunkel write sensible de encrypt data towards bite error much data per bite lose average assume still correct key depend mode use single input block one-bit error percent chance corrupt output bite word essentially turn output block random number encrypt data cbc mode however one block affect next block follow decrypt properly good idea kind error correction system corrupt bite likely todd pausch paul schlyter article cat write hello sensible de encrypt data towards bite error much data per bite lose average assume still correct key least byte data destroy one bite encrypt data error use cbc cihper block chain remainder data destroy well de seisitive single bite error paul schlyter swedish amateur astronomer society saaf nybrogatan tr stockholm sweden internet pausch paul crowley pdc sensible de encrypt data towards bite error much data per bite lose average assume still correct key probably bad might lose rest data stream want safety drop bite use error correct coder like freeware gnu ecc paul crowley pdc trust know x fold fish jesus wcs sensible de encrypt data towards bite error much data per bite lose average assume still correct key depend mode use de electronic code book ecb take block input bite produce output bite bite change entire block bite become bad forget feedback mode result encrypt one block affect later block mode system self-synchronizes error repair block mode one block bad later block bad also frame problem bite change block change maybe later block also change bite lose bite add bite bite everything confuse marcus j ranum mjr depend mode use cfb example synchronise pretty fast figure bite error destroy current block next one mjr experience get get want systemberatung axel dunkel koenigsberger strasse kriftel germany e-mail ad voice fax 