from nikos i subject ncrypt source i get number of request for code so here it be it write in will do tlink t the code ncryption c by nick code segment c code d code org jmp begin bite move bite move west bite move north bite move south bite move bite move west bite move north bite move south collisiong rule rule if e w n s then e w n s if n s e w then n s e w for nibble for byte reflection rule just bite direction this look-up implement two collision for the hpp hpprule db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db this rule implement the need to run the evolution in reverse it it the be hit on db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db db equ lineno equ srcptr dw offset desptr dw offset db dup db dup db dup db dup db dup db db db db this be test for encryption db the be encode of db whose time evolution be then db with type decryption db be by run the in reverse db ensure even if single db bite be flip no decryption of the be possible db db the be let to evolve for timesteps db one either run the reverse evolution by press db or flip bite then run by press db db for the key would consist db of the number of time step the time db of specific bite inversion db db db db db fill the with piece of code mov di c srcptr mov si offset mov cx lineno push di push cx mov cx mov c si mov c di inc si inc di loop pop cx pop di di loop mov si c srcptr mov di offset mov cx mov mov byte ptr c si not inc si loop ret molecule bounce push e push si push di push cx push bx mov mov e mov si c srcptr mov mov cx si push cx push di mov cx mov c si mov byte ptr e di inc si dec cx pop di pop cx loop pop bx pop cx pop di pop si pop e ret c si sourse of c di of first byte be of mov be the byte mov bh c north be one line up lower bite or bl bh or them into the byte mov bh c south be one line down higher bite or bl bh the stuff into mov bh c si west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di middle byte be in loop mov cx mov be the byte mov bh c north be one line up lower bite or bl bh or them into the byte mov bh c south be one line down higher bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di loop byte be mov be the byte mov bh c north be one line up lower bite or bl bh or them into the byte mov bh c south be one line down higher bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c si be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di ret c si sourse of c di of first byte be of mov mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di middle byte be in loop mov cx mov be the byte mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di loop byte be mov be the byte mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c si be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di ret c si sourse of c di of first byte be of mov be the byte mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c si west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di middle byte be in loop mov cx mov be the byte mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di loop byte be mov be the byte mov bh c bite or bl bh or them into the byte mov bh c bite or bl bh the stuff into mov bh c west be one byte leave lower bite or bl bh mov bh c si be one byte right higher bite or bl bh mov mov byte ptr c bx offset hpprule mov c di inc si inc di ret invert velocity in the push bx push cx push si mov si c srcptr mov mov cx lineno push cx mov cx mov bl c si mov byte ptr c bx offset mov c si inc si loop pop cx loop pop si pop cx pop bx ret mov si c srcptr mov di c desptr mov c srcptr di mov c desptr si push si push di pop di pop si si di mov cx dont first push si push di push cx pop cx pop di pop si si di loop push si push di pop si pop di ret hpp rule cx time push cx pop cx loop ret hpp rule cx time mov mov cx offset offset mov byte ptr c si offset xor byte ptr c si offset inc si loop mov si c srcptr mov cx mov mov mov mov bl byte ptr c si mov dl byte ptr c not xor dl dl inc si loop mov mov cx offset offset mov byte ptr c xor byte ptr c inc si loop jmp mov offset push ret db dup push push bx push cx push dx push d mov mov dx c msgptr int pop d pop dx pop cx pop bx pop ret db dup msgptr dw offset msg msg db this be print out by db code decrypt use from the db which to the decode routine db every time step db the decode function leave the code db except the evolution completelly db reverse the time equ repetition enough to the begin mov mov mov mov mov int mov mov mov mov int mov int push cx mov cx time mov int cmp jne mov si c srcptr xor byte ptr c si mov cx time mov int code end end 